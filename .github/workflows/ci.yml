name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Check if version changed
      id: version-check
      run: |
        if git diff HEAD~1 package.json | grep -q '"version"'; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Git Tag
      if: steps.version-check.outputs.version_changed == 'true'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "v${{ steps.version-check.outputs.new_version }}" -m "Release version ${{ steps.version-check.outputs.new_version }}"
        git push origin "v${{ steps.version-check.outputs.new_version }}"
    
    - name: Create GitHub Release
      if: steps.version-check.outputs.version_changed == 'true'
      run: |
        gh release create "v${{ steps.version-check.outputs.new_version }}" \
          --title "Release v${{ steps.version-check.outputs.new_version }}" \
          --notes "ðŸš€ **Version ${{ steps.version-check.outputs.new_version }}** has been released!

        ## ðŸ“‹ What's Changed
        
        See the [CHANGELOG.md](https://github.com/suhaibjanjua/colorjslogger/blob/main/CHANGELOG.md) for detailed information about this release.
        
        ## ðŸ“¦ Installation
        
        \`\`\`bash
        npm install colorjslogger@${{ steps.version-check.outputs.new_version }}
        \`\`\`
        
        ## ðŸ”— Links
        
        - [NPM Package](https://www.npmjs.com/package/colorjslogger)
        - [Documentation](https://github.com/suhaibjanjua/colorjslogger#readme)
        - [Issues](https://github.com/suhaibjanjua/colorjslogger/issues)"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to NPM
      if: steps.version-check.outputs.version_changed == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}