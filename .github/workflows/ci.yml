name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Get current version
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Check if version changed
      id: version-check
      run: |
        if git diff HEAD~1 package.json | grep -q '"version"'; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "✅ Version changed in package.json"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No version change detected"
        fi
    
    - name: Check if tag exists
      id: tag-check
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "ℹ️ Tag v$VERSION already exists"
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "✅ Tag v$VERSION does not exist"
        fi
    
    - name: Create tag and release
      if: steps.version-check.outputs.version_changed == 'true' && steps.tag-check.outputs.tag_exists == 'false'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Extract changelog content
        CHANGELOG_CONTENT=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$ d' | tail -n +2)
        if [ -z "$CHANGELOG_CONTENT" ]; then
          CHANGELOG_CONTENT="Release version $VERSION"
        fi
        
        # Create and push tag
        git tag -a "v$VERSION" -m "Release version $VERSION"
        git push origin "v$VERSION"
        
        # Create GitHub release
        echo "$CHANGELOG_CONTENT" > /tmp/release_notes.md
        gh release create "v$VERSION" \
          --title "Release v$VERSION" \
          --notes-file /tmp/release_notes.md \
          --target main
        
        echo "✅ Created tag and release for v$VERSION"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check if NPM version exists
      id: npm-check
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if npm view colorjslogger@$VERSION version 2>/dev/null; then
          echo "npm_exists=true" >> $GITHUB_OUTPUT
          echo "ℹ️ Version $VERSION already exists on NPM"
        else
          echo "npm_exists=false" >> $GITHUB_OUTPUT
          echo "✅ Version $VERSION does not exist on NPM"
        fi
    
    - name: Publish to NPM
      if: steps.version-check.outputs.version_changed == 'true' && steps.npm-check.outputs.npm_exists == 'false'
      run: |
        echo "🚀 Publishing version ${{ steps.version.outputs.version }} to NPM..."
        npm publish
        echo "✅ Successfully published to NPM!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}